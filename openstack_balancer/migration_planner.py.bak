# migration_planner.py

"""Migration planning and simulation functionality."""

import logging
from dataclasses import dataclass
from typing import Dict, Set, List, Tuple, Optional, Any
import requests

from openstack.compute.v2.server import Server

from .config import CPU_ALLOCATION_RATIO, RAM_ALLOCATION_RATIO
from .exceptions import OpenStackError

logger = logging.getLogger(__name__)

@dataclass
class SimulatedState:
    """Tracks simulated node state during migration planning."""
    vcpus_total: int
    vcpus_used: int
    memory_mb_total: int
    memory_mb_used: int
    running_vms: int
    planned_migrations_in: Set[str]  # VM IDs
    planned_migrations_out: Set[str]  # VM IDs

    @property
    def available_vcpus(self) -> float:
        return (self.vcpus_total * CPU_ALLOCATION_RATIO) - self.vcpus_used

    @property
    def available_memory(self) -> float:
        return (self.memory_mb_total * RAM_ALLOCATION_RATIO) - self.memory_mb_used

    @property
    def cpu_ratio(self) -> float:
        return self.vcpus_used / (self.vcpus_total * CPU_ALLOCATION_RATIO) if self.vcpus_total > 0 else 1.0

    @property
    def memory_ratio(self) -> float:
        return self.memory_mb_used / (self.memory_mb_total * RAM_ALLOCATION_RATIO) if self.memory_mb_total > 0 else 1.0

class MigrationPlanner:
    """Plans and validates migrations considering resource constraints."""

    def __init__(self, conn, flavor_cache: Dict):
        """Initialize the planner."""
        self.conn = conn
        self.flavor_cache = flavor_cache
        self.simulated_states: Dict[str, SimulatedState] = {}
        self.provider_uuid_cache = {}
        self.host_traits_cache = {}

    def init_simulation(self, hypervisors: List[dict]) -> None:
        """Initialize simulation state from hypervisors."""
        self.simulated_states.clear()
        for hypervisor in hypervisors:
            hostname = hypervisor['hypervisor_hostname']
            self.simulated_states[hostname] = SimulatedState(
                vcpus_total=hypervisor.get('vcpus', 0),
                vcpus_used=hypervisor.get('vcpus_used', 0),
                memory_mb_total=hypervisor.get('memory_mb', 0),
                memory_mb_used=hypervisor.get('memory_mb_used', 0),
                running_vms=hypervisor.get('running_vms', 0),
                planned_migrations_in=set(),
                planned_migrations_out=set()
            )

    def get_host_traits(self, hostname: str) -> Set[str]:
        """Get and cache traits for a host."""
        if hostname in self.host_traits_cache:
            return self.host_traits_cache[hostname]

        try:
            # Get provider UUID
            if hostname not in self.provider_uuid_cache:
                placement_url = self.conn.endpoint_for('placement')
                response = requests.get(
                    f"{placement_url}/resource_providers?name={hostname}",
                    headers={
                        "X-Auth-Token": self.conn.auth_token,
                        "OpenStack-API-Version": "placement 1.32"
                    }
                )
                response.raise_for_status()
                providers = response.json().get('resource_providers', [])

                if not providers:
                    logger.warning(f"No resource provider found for host {hostname}")
                    return set()

                self.provider_uuid_cache[hostname] = providers[0]['uuid']

            # Get traits
            provider_uuid = self.provider_uuid_cache[hostname]
            placement_url = self.conn.endpoint_for('placement')
            response = requests.get(
                f"{placement_url}/resource_providers/{provider_uuid}/traits",
                headers={
                    "X-Auth-Token": self.conn.auth_token,
                    "OpenStack-API-Version": "placement 1.32"
                }
            )
            response.raise_for_status()
            traits = set(response.json().get('traits', []))
            self.host_traits_cache[hostname] = traits
            return traits

        except Exception as e:
            logger.error(f"Error getting traits for host {hostname}: {e}")
            return set()

    def get_required_traits(self, vm: Server) -> Set[str]:
        """Get required traits for a VM from both HCI info and flavor."""
        required_traits = set()
        try:
            # Get VM details including HCI info
            compute_url = self.conn.endpoint_for('compute')
            response = requests.get(
                f"{compute_url}/servers/{vm.id}",
                headers={"X-Auth-Token": self.conn.auth_token}
            )
            response.raise_for_status()
            vm_data = response.json()['server']

            # Get traits from HCI info
            hci_traits = vm_data.get('hci_info', {}).get('required_traits', [])
            required_traits.update(hci_traits)

            # Get traits from flavor extra specs
            flavor_id = vm_data['flavor']['id']
            if flavor_id in self.flavor_cache:
                flavor = self.flavor_cache[flavor_id]
                if hasattr(flavor, 'extra_specs'):
                    for key, value in flavor.extra_specs.items():
                        if key.startswith('trait:') and value.lower() == 'required':
                            required_traits.add(key.split(':', 1)[1])

            return required_traits

        except Exception as e:
            logger.error(f"Error getting required traits for VM {vm.id}: {e}")
            return set()

    def check_trait_compatibility(self, vm: Server, target_host: str) -> bool:
        """Check if target host has required traits for VM."""
        try:
            required_traits = self.get_required_traits(vm)
            if not required_traits:
                return True  # No required traits

            host_traits = self.get_host_traits(target_host)
            missing_traits = required_traits - host_traits

            if missing_traits:
                logger.debug(f"Host {target_host} missing required traits: {missing_traits}")
                return False

            return True

        except Exception as e:
            logger.error(f"Error checking trait compatibility: {e}")
            return False


    def would_improve_balance(self, vm: Server, source: str, target: str, vm_flavor: Any) -> bool:
        """Check if migration would improve overall balance."""
        try:
            # First verify both hosts exist in our simulation
            if source not in self.simulated_states or target not in self.simulated_states:
                logger.debug(f"Missing simulation state for {source} or {target}")
                return False
    
            source_state = self.simulated_states[source]
            target_state = self.simulated_states[target]
    
            # Skip if either state is invalid
            if not (source_state.vcpus_total and target_state.vcpus_total):
                logger.debug("Invalid resource totals in simulation state")
                return False
    
            # Calculate current imbalance
            current_source_ratio = max(source_state.cpu_ratio, source_state.memory_ratio)
            current_target_ratio = max(target_state.cpu_ratio, target_state.memory_ratio)
            current_imbalance = abs(current_source_ratio - current_target_ratio)
    
            # Calculate post-migration ratios
            new_source_vcpus = source_state.vcpus_used - vm_flavor.vcpus
            new_source_memory = source_state.memory_mb_used - vm_flavor.ram
            new_target_vcpus = target_state.vcpus_used + vm_flavor.vcpus
            new_target_memory = target_state.memory_mb_used + vm_flavor.ram
    
            # Calculate new ratios with safety checks
            new_source_ratio = max(
                new_source_vcpus / (source_state.vcpus_total * CPU_ALLOCATION_RATIO),
                new_source_memory / (source_state.memory_mb_total * RAM_ALLOCATION_RATIO)
            )
            new_target_ratio = max(
                new_target_vcpus / (target_state.vcpus_total * CPU_ALLOCATION_RATIO),
                new_target_memory / (target_state.memory_mb_total * RAM_ALLOCATION_RATIO)
            )
            new_imbalance = abs(new_source_ratio - new_target_ratio)
    
            improvement = current_imbalance - new_imbalance
            if improvement > 0:
                logger.debug(f"Migration would improve balance by {improvement:.3f}")
                return True
            else:
                logger.debug(f"Migration would not improve balance (change: {improvement:.3f})")
                return False
    
        except Exception as e:
            logger.error(f"Error calculating balance improvement for VM {vm.name} ({vm.id}): {str(e)}")
            return False

    def can_migrate(self, vm: Server, target_host: str, vm_flavor: Any) -> Tuple[bool, str]:
        """Check if VM can be migrated to target host."""
        try:
            target_state = self.simulated_states.get(target_host)
            if not target_state:
                return False, "Target host not in simulation"

            # Check if VM is already planned for migration
            if vm.id in target_state.planned_migrations_in:
                return False, "VM already planned for migration to this host"

            # Check simulated resource availability
            if target_state.available_vcpus < vm_flavor.vcpus:
                return False, f"Insufficient vCPUs ({target_state.available_vcpus:.1f} available, {vm_flavor.vcpus} required)"
            if target_state.available_memory < vm_flavor.ram:
                return False, f"Insufficient memory ({target_state.available_memory}MB available, {vm_flavor.ram}MB required)"

            # Check trait compatibility
            if not self.check_trait_compatibility(vm, target_host):
                return False, "Missing required traits"

            # Check if migration improves balance
            source_host = vm.get('OS-EXT-SRV-ATTR:host')
            if not self.would_improve_balance(vm, source_host, target_host, vm_flavor):
                return False, "Migration would not improve balance"

            return True, "OK"

        except Exception as e:
            logger.error(f"Error checking migration possibility: {e}")
            return False, str(e)

    def register_migration(self, vm: Server, source: str, target: str, vm_flavor: Any) -> None:
        """Register a planned migration in the simulation."""
        try:
            # Update source node
            source_state = self.simulated_states[source]
            source_state.vcpus_used -= vm_flavor.vcpus
            source_state.memory_mb_used -= vm_flavor.ram
            source_state.running_vms -= 1
            source_state.planned_migrations_out.add(vm.id)

            # Update target node
            target_state = self.simulated_states[target]
            target_state.vcpus_used += vm_flavor.vcpus
            target_state.memory_mb_used += vm_flavor.ram
            target_state.running_vms += 1
            target_state.planned_migrations_in.add(vm.id)

            logger.debug(f"Registered migration of VM {vm.name} from {source} to {target}")

        except Exception as e:
            logger.error(f"Error registering migration: {e}")

    def get_simulation_summary(self) -> str:
        """Get a formatted summary of the simulation state."""
        summary = ["Simulation Summary:"]
        for hostname, state in self.simulated_states.items():
            summary.append(f"\nNode: {hostname}")
            summary.append(f"  CPU Usage: {state.cpu_ratio * 100:.1f}%")
            summary.append(f"  Memory Usage: {state.memory_ratio * 100:.1f}%")
            summary.append(f"  Running VMs: {state.running_vms}")
            if state.planned_migrations_in or state.planned_migrations_out:
                summary.append(f"  Planned Migrations:")
                summary.append(f"    In:  {len(state.planned_migrations_in)}")
                summary.append(f"    Out: {len(state.planned_migrations_out)}")
        return "\n".join(summary)
